{"version":3,"sources":["logo.svg","components/map/mapa.js","components/dado/dado.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_VIEWPORT","center","zoom","Dado","Component","props","this","dadoImg","className","src","process","valor","initialState","equipo","comentarios","participante","comentarioParticipante","imagenDado","showTxtComentarios","modoComentario","App","state","JSON","parse","stringify","tirar","bind","agregar","quitar","reset","showComentarios","setModo","max","length","index","Math","round","floor","random","filter","p","c","i","console","log","setState","nuevo","document","getElementById","value","comentarioNuevo","find","e","toUpperCase","push","trim","comentariosEdit","init","target","checked","style","cursor","type","id","onChange","for","map","key","onClick","placeholder","class","fontSize","undefined","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,kC,yMCGrCC,EAAmB,CACvBC,OAAQ,CAAC,QAAS,KAClBC,KAAM,ICwBOC,GDrBIC,Y,8DCFjB,WAAaC,GAAQ,OAAC,oBAAD,YAGbA,G,qDAcN,OARMC,KAAKD,MAAME,QAKP,yBAAKC,UAAU,oBAAoBC,IAAG,UAAKC,gBAAL,yBAJtC,yBAAKF,UAAU,iCAAiCF,KAAKD,MAAMM,W,GAZtDP,cCIbQ,G,MAAe,CAEnBC,OAAQ,GACRC,YAAa,GACbC,aAAc,GACdC,uBAAwB,GACxBC,YAAY,EACZC,oBAAoB,EACpBC,gBAAgB,IAyOHC,E,kDAlOb,WAAYf,GAAQ,IAAD,8BAEjB,cAAMA,IACDgB,MAAQC,KAAKC,MAAMD,KAAKE,UAAUZ,IAEvC,EAAKa,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,gBACd,EAAKG,MAAQ,EAAKA,MAAMH,KAAX,gBACb,EAAKI,gBAAkB,EAAKA,gBAAgBJ,KAArB,gBACvB,EAAKK,QAAU,EAAKA,QAAQL,KAAb,gBAVE,E,oDAejB,IAAMM,EAAM1B,KAAKe,MAAMR,OAAOoB,OACxBC,EAAQC,KAAKC,MAAMD,KAAKE,MAAMF,KAAKG,SAAWH,KAAKE,MAAML,KACzDjB,EAAeT,KAAKe,MAAMR,OAAOqB,GACjClB,EAAyBV,KAAKe,MAAMP,YAAYoB,GAEhDrB,EAASP,KAAKe,MAAMR,OAAO0B,QAAO,SAAAC,GAAC,OAAIA,IAAMzB,KAC7CD,EAAcR,KAAKe,MAAMP,YAAYyB,QAAO,SAACE,EAAGC,GAAJ,OAAUA,IAAMR,KAElES,QAAQC,IAAI9B,GAEZR,KAAKuC,SAAS,CACZhC,SACAE,eACAC,yBACAF,cACAG,YAAY,M,gCAMd,IAAM6B,EAAQC,SAASC,eAAe,mBACtC,GAAmB,IAAfF,EAAMG,MAAV,CAEA,IAAMC,EAAkBH,SAASC,eAAe,kBAEhD,IAAK1C,KAAKe,MAAMR,OAAOsC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,gBAAkBP,EAAMG,MAAMI,iBAAgB,CAE/E,IAAMxC,EAASP,KAAKe,MAAMR,OAC1BA,EAAOyC,KAAKR,EAAMG,OAElB,IAAMnC,EAAcR,KAAKe,MAAMP,YAC3BoC,IAEFpC,EAAYwC,KAAKJ,EAAgBD,OAA0C,KAAjCC,EAAgBD,MAAMM,OAAgBL,EAAgBD,MAAMM,OAAS,IAC/GL,EAAgBD,MAAQ,IAG1BH,EAAMG,MAAQ,GAEd3C,KAAKuC,SAAS,CACZhC,SACAC,oB,+BAOJ,IAAMgC,EAAQC,SAASC,eAAe,mBAChCQ,EAAkBT,SAASC,eAAe,kBAChD,GAAmB,IAAfF,EAAMG,MAAV,CAEA,IAAIpC,EAASP,KAAKe,MAAMR,OACpBqB,EAAQ,EACZrB,EAASP,KAAKe,MAAMR,OAAO0B,QAAO,SAACa,EAAGV,GAEpC,OAAIU,EAAEC,gBAAkBP,EAAMG,MAAMI,gBAElCnB,EAAQQ,GACD,MAbJ,IAmBD5B,EAAgBR,KAAKe,MAArBP,YACFA,EAAYmB,OAAS,IAEvBnB,EAAcA,EAAYyB,QAAO,SAACE,EAAGC,GAAJ,OAAUA,IAAMR,MAGnDY,EAAMG,MAAQ,GACdO,EAAgBP,MAAQ,GACxB3C,KAAKuC,SAAS,CACZhC,SACAC,mB,8BAMF,IAAM2C,EAAOnC,KAAKC,MAAMD,KAAKE,UAAUZ,IACvCN,KAAKuC,SAAL,eAEKY,M,yCAIsB,IAAXC,EAAU,EAAVA,OAEhBpD,KAAKuC,SAAS,CACZ3B,mBAAoBwC,EAAOC,Y,iCAIV,IAAXD,EAAU,EAAVA,OAERpD,KAAKuC,SAAS,CACZ1B,eAAgBuC,EAAOC,Y,+BAMzB,OACE,6BAEE,yBAAKnD,UAAU,sBACb,6BACE,yBAAKA,UAAU,kCACb,2BAAOoD,MAAO,CAACC,OAAQ,WAAYC,KAAK,WAAWtD,UAAU,uBAAuBuD,GAAG,eAAeJ,QAASrD,KAAKe,MAAMH,mBAAoB8C,SAAU1D,KAAKwB,kBAC7J,2BAAO8B,MAAO,CAACC,OAAQ,WAAYrD,UAAU,uBAAuByD,IAAI,gBAAxE,uBAEF,yBAAKzD,UAAU,sCAAsCoD,MAAO,CAACC,OAAQ,YACnE,2BAAOD,MAAO,CAACC,OAAQ,WAAYC,KAAK,WAAWtD,UAAU,uBAAuBuD,GAAG,eAAeJ,QAASrD,KAAKe,MAAMF,eAAgB6C,SAAU1D,KAAKyB,UACzJ,2BAAO6B,MAAO,CAACC,OAAQ,WAAYrD,UAAU,uBAAuByD,IAAI,gBAAxE,wBAKN,yBAAKzD,UAAU,0BACZF,KAAKe,MAAMR,OAAOoB,OAAS,IAAM3B,KAAKe,MAAMF,gBAC3Cb,KAAKe,MAAMR,OAAOqD,KAAI,SAAAd,GACpB,OACE,yBAAKe,IAAKhC,KAAKG,SAAU9B,UAAU,+BACjC,kBAAC,EAAD,CAAMG,MAAOyC,QAKS,IAA7B9C,KAAKe,MAAMR,OAAOoB,QACjB,wBAAIzB,UAAU,sBAAd,aAIJ,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,oBAEVF,KAAKe,MAAMH,oBACZ,yBAAKV,UAAU,mBACb,yBAAKA,UAAU,SACb,4BAAQA,UAAU,kBAAkB4D,QAAS9D,KAAKsB,QAAlD,MAEF,yBAAKpB,UAAU,SACb,2BAAOuD,GAAG,kBAAkBvD,UAAU,eAAesD,KAAK,OAAOO,YAAY,kBAE/E,yBAAK7D,UAAU,SACb,4BAAQA,UAAU,kBAAkB4D,QAAS9D,KAAKqB,SAAlD,OAKJrB,KAAKe,MAAMH,oBACX,oCACE,yBAAKV,UAAU,mBACb,yBAAKA,UAAU,SACb,2BAAOuD,GAAG,kBAAkBvD,UAAU,eAAesD,KAAK,OAAOO,YAAY,mBAGjF,yBAAK7D,UAAU,mBACb,yBAAKA,UAAU,SACb,4BAAQA,UAAU,kBAAkB4D,QAAS9D,KAAKsB,QAAlD,MAEF,yBAAKpB,UAAU,SACb,2BAAOuD,GAAG,iBAAiBvD,UAAU,eAAesD,KAAK,OAAOO,YAAY,iBAE9E,yBAAK7D,UAAU,SACb,4BAAQA,UAAU,kBAAkB4D,QAAS9D,KAAKqB,SAAlD,WASd,6BACA,yBAAKnB,UAAU,eAEVF,KAAKe,MAAMF,gBACZ,kBAAC,EAAD,CAAMR,MAAOL,KAAKe,MAAMN,aAAcR,QAASD,KAAKe,MAAMJ,aAG9B,KAA5BX,KAAKe,MAAMN,cAAuBT,KAAKe,MAAMF,gBAC7C,yBAAKmD,MAAM,qCAAqCV,MAAO,CAACW,SAAU,SAChE,qCAA+CC,IAAtClE,KAAKe,MAAML,uBAAuCV,KAAKe,MAAML,uBAAyB,8CAIrG,6BACA,yBAAKR,UAAU,eACb,4BACEA,UAAU,kBACV4D,QAAS9D,KAAKmB,MACdgD,SAAuC,IAA7BnE,KAAKe,MAAMR,OAAOoB,QAH9B,SAM8B,IAA7B3B,KAAKe,MAAMR,OAAOoB,QAEjB,4BACEzB,UAAU,sBACV4D,QAAS9D,KAAKuB,OAFhB,e,GA5NMzB,aCPEsE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASC,eAAe,SDyHpB,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.e073562f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Map, Marker, Popup, TileLayer, ZoomControl } from 'react-leaflet';\r\n\r\nconst DEFAULT_VIEWPORT = {\r\n  center: [51.505, -0.09],\r\n  zoom: 13,\r\n};\r\n\r\nclass Mapa extends Component {\r\n\r\n    constructor(props) {\r\n\r\n      super(props);\r\n      // Initialize the viewport to the one provided in props\r\n      this.state = {\r\n        viewport: DEFAULT_VIEWPORT,\r\n      }\r\n    }\r\n  \r\n    componentWillReceiveProps({ viewport }) {\r\n\r\n      // When the provided viewport changes, apply it\r\n      // if (viewport !== this.props.viewport) {\r\n\r\n      //   this.setState({ viewport });\r\n      // }\r\n    }\r\n  \r\n    onClickReset = () => {\r\n\r\n      // Reset to position provided in props\r\n      this.setState({ viewport: DEFAULT_VIEWPORT });\r\n    }\r\n  \r\n    onViewportChanged = (viewport) => {\r\n\r\n      // The viewport got changed by the user, keep track in state\r\n      this.setState({ viewport });\r\n    }\r\n  \r\n    render() {\r\n\r\n      let settings = {\r\n        className: 'markercluster-map mapMarkercluster',\r\n        zoomControl: false,\r\n        maxZoom: 16,\r\n        minZoom: 3\r\n      };\r\n\r\n      settings.zoom = 13;\r\n      settings.center = {\r\n        lat: parseFloat(-34.621130653068505),\r\n        lng: parseFloat(-58.42778205871583),\r\n      };\r\n\r\n      return (\r\n        <Map {...settings}>\r\n          <React.Fragment>\r\n            <TileLayer\r\n              attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\r\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n          </React.Fragment>\r\n        </Map>\r\n      )\r\n    }\r\n  } \r\n\r\n  export default Mapa;","import React, { Component } from 'react';\r\nimport './dado.css';\r\nimport '../../css/animated.css';\r\n\r\nclass Dado extends Component {\r\n    \r\n  constructor( props ) {\r\n\r\n    //TODO: debo bifurcar si es la imagen del dado o el dado del participante\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n\r\n    let html = '';\r\n    if ( !this.props.dadoImg ) {\r\n      html = (<div className=\"Dado-recuadro animated fadeIn\">{this.props.valor}</div>);\r\n    }\r\n    else {\r\n\r\n      html = (<img className=\"animated bounceIn\" src={`${process.env.PUBLIC_URL}/images/logo192.png`} ></img>);\r\n    }\r\n\r\n    return (\r\n      html\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dado;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Mapa from './components/map/mapa';\nimport Dado from './components/dado/dado';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/animated.css';\n\nconst initialState = {\n\n  equipo: [],\n  comentarios: [],\n  participante: '',\n  comentarioParticipante: '',\n  imagenDado: true,\n  showTxtComentarios: false,\n  modoComentario: false\n};\n\nclass App extends Component {\n\n\n\n  constructor(props) {\n\n    super(props);\n    this.state = JSON.parse(JSON.stringify(initialState));\n\n    this.tirar = this.tirar.bind(this);\n    this.agregar = this.agregar.bind(this);\n    this.quitar = this.quitar.bind(this);\n    this.reset = this.reset.bind(this);\n    this.showComentarios = this.showComentarios.bind(this);\n    this.setModo = this.setModo.bind(this);\n  }\n\n  tirar() {\n\n    const max = this.state.equipo.length;\n    const index = Math.round(Math.floor(Math.random() * Math.floor(max)));\n    const participante = this.state.equipo[index];\n    const comentarioParticipante = this.state.comentarios[index];\n\n    const equipo = this.state.equipo.filter(p => p !== participante);\n    const comentarios = this.state.comentarios.filter((c, i) => i !== index);\n\n    console.log(comentarios);\n\n    this.setState({\n      equipo,\n      participante,\n      comentarioParticipante,\n      comentarios,\n      imagenDado: false\n    })\n  }\n\n  agregar() {\n\n    const nuevo = document.getElementById('txtParticipante');\n    if (nuevo.value == '') { return; }\n\n    const comentarioNuevo = document.getElementById('txtComentarios');\n\n    if (!this.state.equipo.find(e => e.toUpperCase() === nuevo.value.toUpperCase())) {\n\n      const equipo = this.state.equipo;\n      equipo.push(nuevo.value);\n\n      const comentarios = this.state.comentarios;\n      if (comentarioNuevo) {\n\n        comentarios.push(comentarioNuevo.value && comentarioNuevo.value.trim() !== '' ? comentarioNuevo.value.trim() : '');\n        comentarioNuevo.value = '';\n      }\n\n      nuevo.value = '';\n\n      this.setState({\n        equipo,\n        comentarios\n      });\n    }\n  }\n\n  quitar() {\n\n    const nuevo = document.getElementById('txtParticipante');\n    const comentariosEdit = document.getElementById('txtComentarios');\n    if (nuevo.value == '') { return; }\n\n    let equipo = this.state.equipo;\n    let index = 0;\n    equipo = this.state.equipo.filter((e, i) => {\n\n      if (e.toUpperCase() === nuevo.value.toUpperCase()) {\n\n        index = i;\n        return false;\n      }\n\n      return true;\n    });\n\n    let { comentarios } = this.state;\n    if (comentarios.length > 0) {\n\n      comentarios = comentarios.filter((c, i) => i !== index);\n    }\n\n    nuevo.value = '';\n    comentariosEdit.value = '';\n    this.setState({\n      equipo,\n      comentarios\n    });\n  }\n\n  reset() {\n\n    const init = JSON.parse(JSON.stringify(initialState));\n    this.setState({\n\n      ...init\n    });\n  }\n\n  showComentarios({ target }) {\n\n    this.setState({\n      showTxtComentarios: target.checked\n    });\n  }\n\n  setModo({ target }) {\n\n    this.setState({\n      modoComentario: target.checked\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n\n        <div className=\"row left ml-5 mt-2\">\n          <div>\n            <div className=\"custom-control custom-checkbox\">\n              <input style={{cursor: 'pointer'}} type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" checked={this.state.showTxtComentarios} onChange={this.showComentarios} />\n              <label style={{cursor: 'pointer'}} className=\"custom-control-label\" for=\"customCheck1\">Cargar comentarios</label>\n            </div>\n            <div className=\"custom-control custom-checkbox mt-2\" style={{cursor: 'pointer'}}>\n              <input style={{cursor: 'pointer'}} type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck2\" checked={this.state.modoComentario} onChange={this.setModo} />\n              <label style={{cursor: 'pointer'}} className=\"custom-control-label\" for=\"customCheck2\">Modo incógnito</label>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row center text-center\">\n          {this.state.equipo.length > 0 && !this.state.modoComentario &&\n            this.state.equipo.map(e => {\n              return (\n                <div key={Math.random()} className=\"col-1 m-2 animated bounceIn\">\n                  <Dado valor={e} />\n                </div>\n              )\n            })\n          }\n          {this.state.equipo.length === 0 &&\n            <h2 className=\"m-5 animated swing\">Daily!!!</h2>\n          }\n        </div>\n\n        <div className=\"row center\">\n          <div className=\"col-6\">\n            <div className=\"form-group mb-2\">\n              {\n                !this.state.showTxtComentarios &&\n                <div className=\"row center mt-5\">\n                  <div className=\"col-2\">\n                    <button className=\"btn btn-primary\" onClick={this.quitar}>-</button>\n                  </div>\n                  <div className=\"col-4\">\n                    <input id=\"txtParticipante\" className=\"form-control\" type=\"text\" placeholder=\"Participante\"></input>\n                  </div>\n                  <div className=\"col-2\">\n                    <button className=\"btn btn-primary\" onClick={this.agregar}>+</button>\n                  </div>\n                </div>\n              }\n              {\n                this.state.showTxtComentarios &&\n                <>\n                  <div className=\"row center mt-5\">\n                    <div className=\"col-4\">\n                      <input id=\"txtParticipante\" className=\"form-control\" type=\"text\" placeholder=\"Participante\"></input>\n                    </div>\n                  </div>\n                  <div className=\"row center mt-5\">\n                    <div className=\"col-2\">\n                      <button className=\"btn btn-primary\" onClick={this.quitar}>-</button>\n                    </div>\n                    <div className=\"col-8\">\n                      <input id=\"txtComentarios\" className=\"form-control\" type=\"text\" placeholder=\"Comentarios\"></input>\n                    </div>\n                    <div className=\"col-2\">\n                      <button className=\"btn btn-primary\" onClick={this.agregar}>+</button>\n                    </div>\n                  </div>\n                </>\n              }\n            </div>\n          </div>\n        </div>\n\n        <hr></hr>\n        <div className=\"row center\">\n          {\n            !this.state.modoComentario &&\n            <Dado valor={this.state.participante} dadoImg={this.state.imagenDado} />\n          }\n          {\n            this.state.participante !== '' && this.state.modoComentario &&\n            <div class=\"alert alert-dismissible alert-info\" style={{fontSize: '20px'}}>\n              <strong>{this.state.comentarioParticipante !== undefined ? this.state.comentarioParticipante : 'No hay comentario para este participante'}</strong>\n            </div>\n          }\n        </div>\n        <hr></hr>\n        <div className=\"text-center\">\n          <button\n            className=\"btn btn-primary\"\n            onClick={this.tirar}\n            disabled={this.state.equipo.length === 0}\n          >Tirar</button>\n\n          {this.state.equipo.length === 0 &&\n\n            <button\n              className=\"btn btn-primary m-2\"\n              onClick={this.reset}>Reset</button>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}